
CTC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000116  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000068c  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000607  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000237  00000000  00000000  00000e3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001074  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000346  00000000  00000000  00001098  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000002e  00000000  00000000  000013de  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000140c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
int main(void)
{
	int cont=-1;
	/*No modo CTC, O TC0 conta até OCR0A (top) e reincia a contagem. Ao atingir top o flag 0CF0A=1*/
	
	DDRD = 0x40; //PD6 COMO SAIDA
  80:	80 e4       	ldi	r24, 0x40	; 64
  82:	8a b9       	out	0x0a, r24	; 10
	
	TIFR0 = 0x07; //ZERA OS FLAGS OCFB, OCFA E TOV
  84:	87 e0       	ldi	r24, 0x07	; 7
  86:	85 bb       	out	0x15, r24	; 21
	PORTD = 0x00; //zera PD6.
  88:	1b b8       	out	0x0b, r1	; 11
	TCNT0 = 0x00; //Zera o timer 0.
  8a:	16 bc       	out	0x26, r1	; 38
	
	OCR0A = 0xFF; //quero que a contagem pare em 256;
  8c:	8f ef       	ldi	r24, 0xFF	; 255
  8e:	87 bd       	out	0x27, r24	; 39
	
	TCCR0A = 0x42; //COM0A1 =0 e COM0A0 = 1 (toogle Oc0a on compare match), CM0B1 = CM0B0 = 0 (operação da porta normal)
  90:	82 e4       	ldi	r24, 0x42	; 66
  92:	84 bd       	out	0x24, r24	; 36
	//WGM01 = 1, WGM00 = 0  e WGM02 - 0(TCCR0B) (modo CTC, TOP = OCR0A, flag OCF0A setado em TOP).
	TCCR0B = 0x05; //FOC0A= FOC0B = 0, WGM02 = 0, CS0[2:0] = 001 (clkIO/a - sem prescaling), ou seja, N=1.
  94:	85 e0       	ldi	r24, 0x05	; 5
  96:	85 bd       	out	0x25, r24	; 37
#include <avr/io.h>
#define F_CPU 16000000UL

int main(void)
{
	int cont=-1;
  98:	8f ef       	ldi	r24, 0xFF	; 255
	// OCR0A = 0xFF e N=1, temos : 62,2n *256=16us a cada 16us ha uma transição.
	
	
	while (1)
	{
		while ((TIFR0 & 0x02) !=0x02){} //verifica se houve overflow, se não houve, não faz nada.
  9a:	a9 9b       	sbis	0x15, 1	; 21
  9c:	fe cf       	rjmp	.-4      	; 0x9a <main+0x1a>
			TIFR0 = 0x02; //Escrevo 1 no bit 1 (OCFA) para zerá-lo.
  9e:	92 e0       	ldi	r25, 0x02	; 2
  a0:	95 bb       	out	0x15, r25	; 21
			
			
		
		
				OCR0A = OCF0A+cont;
  a2:	8f 5f       	subi	r24, 0xFF	; 255
  a4:	87 bd       	out	0x27, r24	; 39
				if (OCR0A<=0)
  a6:	87 b5       	in	r24, 0x27	; 39
  a8:	81 11       	cpse	r24, r1
  aa:	04 c0       	rjmp	.+8      	; 0xb4 <main+0x34>
				{
					//OCR0A= 0xFF;
					cont=-1;
					OCR0A = OCF0A-4;
  ac:	8d ef       	ldi	r24, 0xFD	; 253
  ae:	87 bd       	out	0x27, r24	; 39
		
				OCR0A = OCF0A+cont;
				if (OCR0A<=0)
				{
					//OCR0A= 0xFF;
					cont=-1;
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	f3 cf       	rjmp	.-26     	; 0x9a <main+0x1a>
					OCR0A = OCF0A-4;
				}
				else{
					if (OCR0A<= 0xFF)
  b4:	87 b5       	in	r24, 0x27	; 39
					{
						cont=1;
						OCR0A = OCF0A+4;
  b6:	85 e0       	ldi	r24, 0x05	; 5
  b8:	87 bd       	out	0x27, r24	; 39
					OCR0A = OCF0A-4;
				}
				else{
					if (OCR0A<= 0xFF)
					{
						cont=1;
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	ee cf       	rjmp	.-36     	; 0x9a <main+0x1a>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
