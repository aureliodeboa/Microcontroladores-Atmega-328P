
usartexemple.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000144  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006bc  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000062a  00000000  00000000  000008e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026a  00000000  00000000  00000f0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001178  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036b  00000000  00000000  000011ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000007b  00000000  00000000  00001517  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001592  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 a0 00 	jmp	0x140	; 0x140 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#define F_CPU  16000000UL


int main(void)
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
  88:	6e 97       	sbiw	r28, 0x1e	; 30
  8a:	0f b6       	in	r0, 0x3f	; 63
  8c:	f8 94       	cli
  8e:	de bf       	out	0x3e, r29	; 62
  90:	0f be       	out	0x3f, r0	; 63
  92:	cd bf       	out	0x3d, r28	; 61
	char invertido[30]="";
  94:	1a 82       	std	Y+2, r1	; 0x02
  96:	19 82       	std	Y+1, r1	; 0x01
  98:	fe 01       	movw	r30, r28
  9a:	33 96       	adiw	r30, 0x03	; 3
  9c:	8c e1       	ldi	r24, 0x1C	; 28
  9e:	df 01       	movw	r26, r30
  a0:	1d 92       	st	X+, r1
  a2:	8a 95       	dec	r24
  a4:	e9 f7       	brne	.-6      	; 0xa0 <main+0x20>
	int cont = 0;
	//Para Fosc = 160M, U2Xn =0 e um baud rate= 9600, temos que UBRR0= 103d = 00000000 01100111
	//Para um baud rate = 115200, temos UBRR0 8d = 00000000 00001000
	
	UBRR0H = 0b00000000; // 000000000 bauld rate higth
  a6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = 0b01100111; //9600 bits/s
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	UCSR0A = 0b01000000; //TXC0 = 1 (zera esse flag) , U2x0 = 0 (velocidade normal), MPCM0 = 0 (desabilita modo multiprocessador)   
  b0:	80 e4       	ldi	r24, 0x40	; 64
  b2:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	                                                                                                                                                                                                                                                                                                                            
	UCSR0B = 0b00011000; //desabilita interrupção recepçãp (RXCIe0= 0), transmissão (TXCIE0 = 0)
  b6:	88 e1       	ldi	r24, 0x18	; 24
  b8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
						//e buffer vaxio (UDRIE0=0), habilita receptor USART RXEN0 =1
						//(RxD torna-se uma entrada), habilita transmissor TXEN0 =1
						//(TxD torna-se uma saída), seleciona 8 bitis de dados (UCSZ2 =0).
	UCSR0C = 0b00000110; //habilita o modo assincrono ( UMSEL01/00=00), desabilita paridade (UPM01/00=00),
  bc:	86 e0       	ldi	r24, 0x06	; 6
  be:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
						//sem polaridade (UCPOL0 = 0 - modo assincrono).
	
   
    while (1) 
    {
		for(cont=0; UDR0 =='\n' || cont<30; cont++)
  c2:	20 e0       	ldi	r18, 0x00	; 0
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	11 c0       	rjmp	.+34     	; 0xea <main+0x6a>
		{
			while ((UCSR0A & 0x80) != 0x80){} // Espera a recepção de dados. bit 7 verifica se ha dados para serem lidos 
  c8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  cc:	88 23       	and	r24, r24
  ce:	e4 f7       	brge	.-8      	; 0xc8 <main+0x48>
											 // Rx é zerado apos a leitura de UDR0
			//data = UDR0; //armazena os dados recebidos em data.
			invertido[cont]= UDR0;
  d0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  d4:	e1 e0       	ldi	r30, 0x01	; 1
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	ec 0f       	add	r30, r28
  da:	fd 1f       	adc	r31, r29
  dc:	e2 0f       	add	r30, r18
  de:	f3 1f       	adc	r31, r19
  e0:	80 83       	st	Z, r24
			if (invertido[cont]=='\n'){break;}
  e2:	8a 30       	cpi	r24, 0x0A	; 10
  e4:	49 f0       	breq	.+18     	; 0xf8 <main+0x78>
						//sem polaridade (UCPOL0 = 0 - modo assincrono).
	
   
    while (1) 
    {
		for(cont=0; UDR0 =='\n' || cont<30; cont++)
  e6:	2f 5f       	subi	r18, 0xFF	; 255
  e8:	3f 4f       	sbci	r19, 0xFF	; 255
  ea:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  ee:	8a 30       	cpi	r24, 0x0A	; 10
  f0:	59 f3       	breq	.-42     	; 0xc8 <main+0x48>
  f2:	2e 31       	cpi	r18, 0x1E	; 30
  f4:	31 05       	cpc	r19, r1
  f6:	44 f3       	brlt	.-48     	; 0xc8 <main+0x48>
			invertido[cont]= UDR0;
			if (invertido[cont]=='\n'){break;}
			
		}
		
		cont = strlen(invertido);
  f8:	fe 01       	movw	r30, r28
  fa:	31 96       	adiw	r30, 0x01	; 1
  fc:	df 01       	movw	r26, r30
  fe:	0d 90       	ld	r0, X+
 100:	00 20       	and	r0, r0
 102:	e9 f7       	brne	.-6      	; 0xfe <main+0x7e>
 104:	11 97       	sbiw	r26, 0x01	; 1
 106:	9d 01       	movw	r18, r26
 108:	2e 1b       	sub	r18, r30
 10a:	3f 0b       	sbc	r19, r31
		
		for(;cont>=0;cont--)
 10c:	16 c0       	rjmp	.+44     	; 0x13a <main+0xba>
		{
			while ((UCSR0A & 0x20) != 0x20){} //Verifica se UDR0 pode receber novos dados para Tx. bit 5
 10e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 112:	85 ff       	sbrs	r24, 5
 114:	fc cf       	rjmp	.-8      	; 0x10e <main+0x8e>
			
			UDR0= invertido[cont];
 116:	e1 e0       	ldi	r30, 0x01	; 1
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	ec 0f       	add	r30, r28
 11c:	fd 1f       	adc	r31, r29
 11e:	e2 0f       	add	r30, r18
 120:	f3 1f       	adc	r31, r19
 122:	80 81       	ld	r24, Z
 124:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
			
			while ((UCSR0A & 0x40) != 0x40 ){} // Verifica se os dados já foram "transmitidos".
 128:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 12c:	86 ff       	sbrs	r24, 6
 12e:	fc cf       	rjmp	.-8      	; 0x128 <main+0xa8>
			
			UCSR0A = 0x40; //Zera TXC0 (bit6)
 130:	80 e4       	ldi	r24, 0x40	; 64
 132:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
			
		}
		
		cont = strlen(invertido);
		
		for(;cont>=0;cont--)
 136:	21 50       	subi	r18, 0x01	; 1
 138:	31 09       	sbc	r19, r1
 13a:	33 23       	and	r19, r19
 13c:	44 f7       	brge	.-48     	; 0x10e <main+0x8e>
 13e:	c1 cf       	rjmp	.-126    	; 0xc2 <main+0x42>

00000140 <_exit>:
 140:	f8 94       	cli

00000142 <__stop_program>:
 142:	ff cf       	rjmp	.-2      	; 0x142 <__stop_program>
