
Gccpwmtenta1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000011e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ca  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000011e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000067c  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f8  00000000  00000000  0000082c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000233  00000000  00000000  00000e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001058  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000353  00000000  00000000  0000107c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000013cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
{
   // No modo fast PWM, o TC0 conta até TOP (0xFF ou OCR0A) e reinicia a contagem. ao atingir TOP, o flag OCF0A=1;
   //0 sinal PWM é gerado no pino 0C0A (PD6).
   // clkSYS = 1/16MHz = 60,5 ns = cljIO = clkT0
   
   DDRB = 0x40; //ob01000000 ativa o PD6
  80:	80 e4       	ldi	r24, 0x40	; 64
  82:	84 b9       	out	0x04, r24	; 4
   DDRB = 0b00001000;
  84:	88 e0       	ldi	r24, 0x08	; 8
  86:	84 b9       	out	0x04, r24	; 4
   TIFR0 = 0x07; //zera o flags OCFB e, OCFA e TOV 0b00000111
  88:	87 e0       	ldi	r24, 0x07	; 7
  8a:	85 bb       	out	0x15, r24	; 21
   PORTD = 0x00; //zera o PD6
  8c:	1b b8       	out	0x0b, r1	; 11
   TCNT0 = 0x00; //zera timer 0
  8e:	16 bc       	out	0x26, r1	; 38

	OCR0A = 0x00;
  90:	17 bc       	out	0x27, r1	; 39
	//OCR0B= 0xFF;
	
	TCCR0A =  0x83; //0b10100011;// // COM0A1 = 1 e COM0A0 = 0 (zera OC0A on cmopare match), COM0B1 = COM0B0 = 0 (operação da porta normal).
  92:	83 e8       	ldi	r24, 0x83	; 131
  94:	84 bd       	out	0x24, r24	; 36
	//WGM01 = 1, WGM00 = 1 WGM02 - 0 (TCCR0B) (modo fast PWM, TOP = 0xFF, flag TOV setado em TOP= 0xFF).
	
	TCCR0B= 0x04; // 0b00001101;// //FOC0A = FOC0B = 0, WGM02 = 0, CS0[2:0]= 101 (clkIO/1024), ou seja, N= 1024.
  96:	84 e0       	ldi	r24, 0x04	; 4
  98:	85 bd       	out	0x25, r24	; 37
	// OCR0A = 0xFF e N=1, temos: 62,5 n*256 = 16us *1024 =~ 16,4ms... freqPWM=~61HZ
   
    while (1) 
    {
		while((TIFR0 & 0x02) != 0x02){} //verifica se hove overflow, se não houve, não faz nada.
  9a:	a9 9b       	sbis	0x15, 1	; 21
  9c:	fe cf       	rjmp	.-4      	; 0x9a <main+0x1a>
		TIFR0 = 0x02; //Escrevo 1 no bit (OCFA) para zerá-lo
  9e:	82 e0       	ldi	r24, 0x02	; 2
  a0:	85 bb       	out	0x15, r24	; 21
		
		OCR0A = OCR0A + 1;
  a2:	87 b5       	in	r24, 0x27	; 39
  a4:	8f 5f       	subi	r24, 0xFF	; 255
  a6:	87 bd       	out	0x27, r24	; 39
		if (OCR0A >= 255)
  a8:	87 b5       	in	r24, 0x27	; 39
  aa:	8f 3f       	cpi	r24, 0xFF	; 255
  ac:	b1 f7       	brne	.-20     	; 0x9a <main+0x1a>
		{
			OCR0A = 0x00;
  ae:	17 bc       	out	0x27, r1	; 39
			PORTD ^= (1<<PD6);
  b0:	9b b1       	in	r25, 0x0b	; 11
  b2:	80 e4       	ldi	r24, 0x40	; 64
  b4:	89 27       	eor	r24, r25
  b6:	8b b9       	out	0x0b, r24	; 11
			PORTD ^= (1<<PD3);
  b8:	9b b1       	in	r25, 0x0b	; 11
  ba:	88 e0       	ldi	r24, 0x08	; 8
  bc:	89 27       	eor	r24, r25
  be:	8b b9       	out	0x0b, r24	; 11
			TIFR0 = 0x02;
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	85 bb       	out	0x15, r24	; 21
  c4:	ea cf       	rjmp	.-44     	; 0x9a <main+0x1a>

000000c6 <_exit>:
  c6:	f8 94       	cli

000000c8 <__stop_program>:
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <__stop_program>
